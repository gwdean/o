<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
lang="en" xml:lang="en">
<head>
<title>A nice thing about learning Lisp is that it</title>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1"/>
<meta name="generator" content="Org-mode"/>
<meta name="generated" content="2013-06-12 22:24:56 EDT"/>
<meta name="author" content="Greg"/>
<meta name="description" content=""/>
<meta name="keywords" content=""/>
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color: #add8e6; font-weight:normal }
  .target { }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style>
<script type="text/javascript">
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">

<h1 class="title">A nice thing about learning Lisp is that it</h1>

<p>connects well with Object-Oriented Programming.
</p>
<p>
Two good ways to understand Object-Oriented Programming
is to delve into the Common Lisp Object System (CLOS),
and to create an Object Oriented Language of one's own.
</p>
<p>
The following document reviews several Object-Oriented
Systems in Lisp. They are listed in chronological order.
</p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 1989-Keene. </a>
<ul>
<li><a href="#sec-1.1">1.1 Developing a Simple CLOS Program: Locks. </a></li>
</ul>
</li>
<li><a href="#sec-2">2 1991-AMOP. </a></li>
<li><a href="#sec-3">3 1994-Graham. </a></li>
<li><a href="#sec-4">4 1996-Graham. </a></li>
<li><a href="#sec-5">5 2009-Dybvig. </a></li>
<li><a href="#sec-6">6 2011-Barski </a>
<ul>
<li><a href="#sec-6.1">6.1 Example 1: Wrapping Code Around Methods </a></li>
<li><a href="#sec-6.2">6.2 Example 2: Multiple Dispatch </a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-1" class="outline-3">
<h3 id="sec-1"><span class="section-number-3">1</span> 1989-Keene. </h3>
<div class="outline-text-3" id="text-1">


</div>

<div id="outline-container-1.1" class="outline-4">
<h4 id="sec-1.1"><span class="section-number-4">1.1</span> Developing a Simple CLOS Program: Locks. </h4>
<div class="outline-text-4" id="text-1.1">

<p>(defclass lock ()
((name :initarg :name :reader lock-name))
(:documentation "The foundation of all locks."))
</p>
<p>
(defclass null-lock (lock)
()
(:documentation "A lock that is always free."))
</p>
<p>
(defclass simple-lock (lock)
((owner :initform nil :accessor lock-owner))
(:documentation "A lock that is either free or busy."))
</p>
<p>
(setq <b>null-lock</b>
(make-instance 'null-lock :name "Null lock"))
</p>
<p>
(setq <b>simple-lock</b>
(make-instance 'simple-lock :name "Simple lock"))
</p></div>
</div>

</div>

<div id="outline-container-2" class="outline-3">
<h3 id="sec-2"><span class="section-number-3">2</span> 1991-AMOP. </h3>
<div class="outline-text-3" id="text-2">

</div>

</div>

<div id="outline-container-3" class="outline-3">
<h3 id="sec-3"><span class="section-number-3">3</span> 1994-Graham. </h3>
<div class="outline-text-3" id="text-3">

</div>

</div>

<div id="outline-container-4" class="outline-3">
<h3 id="sec-4"><span class="section-number-3">4</span> 1996-Graham. </h3>
<div class="outline-text-3" id="text-4">

</div>

</div>

<div id="outline-container-5" class="outline-3">
<h3 id="sec-5"><span class="section-number-3">5</span> 2009-Dybvig. </h3>
<div class="outline-text-3" id="text-5">

</div>

</div>

<div id="outline-container-6" class="outline-3">
<h3 id="sec-6"><span class="section-number-3">6</span> 2011-Barski </h3>
<div class="outline-text-3" id="text-6">

<p>Barski's CLOS Guild Battleship
</p>
</div>

<div id="outline-container-6.1" class="outline-4">
<h4 id="sec-6.1"><span class="section-number-4">6.1</span> Example 1: Wrapping Code Around Methods </h4>
<div class="outline-text-4" id="text-6.1">




<pre class="example">(defclass widget ()
  ((color :accessor widget-color
             :initarg :color)))

(defmethod describe-widget ((w widget))
   (format t "this is a ~a widget" (widget-color w)))

(defmethod describe-widget :before ((w widget))
  (add-to-log "Somebody is checking on a widget"))
</pre>




<p>
If we didn't have methods available we would have
to write a dirtier version of widget code as such:
</p>



<pre class="example">(defmethod describe-widget ((w widget))
  (add-to-log "Somebody is checking on a widget")
  (format t "this is a ~a widget" (widget-color w)))
</pre>



</div>

</div>

<div id="outline-container-6.2" class="outline-4">
<h4 id="sec-6.2"><span class="section-number-4">6.2</span> Example 2: Multiple Dispatch </h4>
<div class="outline-text-4" id="text-6.2">




<pre class="example">(defclass color () ())
(defclass red (color) ())
(defclass blue (color) ())
(defclass yellow (color) ())

(defmethod mix ((c1 color) (c2 color))
  "I don't know what color that makes")

(defmethod mix ((c1 blue) (c2 yellow))
  "You made green!")

(defmethod mix ((c1 yellow) (c2 red))
  "You made orange!")
</pre>


</div>
</div>
</div>
<div id="postamble">
<p class="author"> Author: Greg
<a href="mailto:greg@greg-Satellite-C855D">&lt;greg@greg-Satellite-C855D&gt;</a>
</p>
<p class="date"> Date: 2013-06-12 22:24:56 EDT</p>
<p class="creator">HTML generated by org-mode 6.33x in emacs 23</p>
</div>
</div>
</body>
</html>
