; Test-driven Math in Common Lisp

; Test Name (dynamic variable)
(defvar *test-name* nil)

; Functions to test
(defun square (x) (* x x))
(defun triple (x) (+ x x x))
(defun cube (x) (* x x x))

; Test Square
(defun test-square ()
  (let ((*test-name* 'test-square))
    (check
      (= (square 0) 0)
      (= (square 1) 1)
      (= (square 2) 4))))

; Test Triple
(defun test-triple ()
  (let ((*test-name* 'test-triple))
    (check
      (= (triple 0) 0)
      (= (triple 1) 3)
      (= (triple 2) 6))))

; Report Result
(defun report-result (result form)
  (format t "~:[FAIL~;pass~] ... ~a: ~a~%" result *test-name* form)
  result)

; Check
(defmacro check (&body forms)
  `(combine-results
    ,@(loop for f in forms collect `(report-result ,f ',f))))

; Combine Results
(defmacro combine-results (&body forms)
  (with-gensyms (result)
    `(let ((,result t))
       ,@(loop for f in forms collect `(unless ,f (setf ,result nil)))
       ,result)))

; Test Arithmetic
(deftest test-arithmetic ()
  (combine-results
   (test-square)
   (test-triple)))

